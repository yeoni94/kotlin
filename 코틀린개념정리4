* 코틀린 인 액션 4장
4장. 클래스, 객체, 인터페이스

1. 클래스 계층 정의
* 코틀린 인터페이스
- 추상 메소드와 구현이 있는 메소드 모두 정의 가능
- 상태(필드)는 들어갈 수 없다.

interface Clickable {
   fun click() // 일반 메소드 선언
    fun showOff() = println("I'm clickable!"); // 디폴트 구현이 있는 메소드
}

// 동일한 메소드를 구현하는 다른 인터페이스 정의
interface Focusable {
   fun setFocus(b: Boolean) = println("I ${if (b) "got" else "lost"} focus.")
   fun showOff() = println("I'm focusable!")
}

//자바에서는 extends와 implements를 사용하지만 코틀린에서는 :를 사용하고 인터페이스 이름을 작성하면 됨
class Button : Clickable, Focusable {
   override fun click() = println("I was clicked")
    // 이름과 시그니처가 같은 멤버 메소드에 대해 둘 이상의 디폴트 구현이 있는 경우
    // 인터 페이스를 구현하는 하위 클래스에서 명시적으로 새로운 구현을 제공해야 함
    override fun showOff() {
       super<Clickable>.showOff()
        super<Focusable>.showOff()
    }
}

fun main(args: Array<String>) {
   val button = Button()
    button.showOff() // I'm clickable! I'm focusable!
    button.setFocus(true) // I got focus.
    button.click() // I was clicked.
}

* open, final, abstract 변경자: 기본적으로 final
- open 변경자 : 어떤 클래스의 상속을 허용하기 위해 클래스 앞에 붙이는 변경자
-> 오버라이드 허용하고 싶은 메소드나 프로퍼티 앞에도 붙여야 함

open class RichButton : Clickable { // 다른 클래스가 이 클래스 상속 가능
       fun disable() {} //기본적으로 final. 하위 클래스에서 이 메소드 오버라이드 불가능
       open fun animate() {} // 하위 클래스에서 이 메소드 오버라이드 가능
       override fun click {} // 열려있는 메소드를 오버라이드, 오버라이드한 메소드는 기본적으로 열려있음
       final override fun click2 {} // 하위 클래스에서 오버라이드하지 못하게 금지
}

* abstract 변경자: 추상 크래스와 추상 멤버를 선언하기 위한 변경자 / 추상 멤버 앞에 open 변경자를 명시할 필요 없음
abstract class Animated { // 이 클래스는 추상클래스, 클래스의 인스턴스 만들 수 없음
   abstract fun animate() //구현이 없는 추상 함수. 하위 클래스에서 반드시 오버라이드 해야함
   open fun stopAnimating() {} // 추상 클래스에 속했더라도 비추상 함수는 open으로 오버라이드를 허용해야 함
}

* 가시성 변경자: 코드 기반에 있는 선언에 대한 클래스 외부 접근을 제어
public: 모든 곳에서 볼수 있다.
internal: 같은 모듈 안에서만 볼 수 있다.
protected: 하위 클래스 안에서만 볼 수 있다.
private: 같은 클래스 안에서만 볼 수 있다.

* 중첩클래스
- 명시적으로 요청하지 않는 한 바깥쪽 클래스 인스턴스에 대한 접근 권한이 없다.
- 따라서 안에서 밖의 참조에 접근하려면 this@Outer 키워드를 써야한다.
class Outer {
    inner class Inner {
        fun getOuterReference(): Outer = this@Outer
    }
}

* sealed 변경자: 클래스 앞에 해당 변경자를 붙이면 하위 클래스를 정의시 반드시 상위 클래스 안에 중첩시켜야한다.
sealed class Expr { // 기반 클래스를 sealed로 봉인한다.
    class Num(val value: Int) : Expr()  // 기반 클래스의 모든 하위 클래스를 중첩 클래스로 나열한다.
    class Sum(val left: Expr, val right: Expr) : Expr()
}

fun eval(e: Expr): Int =
    when (e) {  // "when" 식이 모든 하위 클래스를 검사하므로 별도의 "else" 분기가 없어도 된다.
        is Expr.Num -> e.value
        is Expr.Sum -> eval(e.right) + eval(e.left)
    }

2. 뻔하지 않은 생성자와 프로퍼티를 갖는 클래스 선언

* 클래스 초기화 방법은 다음과 같다. 

class User(val nickname: String)    //파라미터가 하나뿐인 주 생성자

class User(val nickname: String, val isSubscribed: Boolean = true)  // 디폴트 값을 제공하는 생성자

class TwitterUser(nickname: String) : User(nickname) {} // 기반 클래스를 초기화하려면 기반 클래스 이름 뒤에 괄호를 치고 생성자를 넘긴다.

open class Button   // 인자가 없는 디폴트 생성자 생성

class RadioButton: Button() // Button 클래스를 상속한 하위 클래스는 반드시 Button 클래스의 생성자를 호출해야 한다.

class Secretive private constructor() {} // 비공개 생성자 - 클래스 외부에서 인스턴스화하지 못하게 막을려면 private 선언

* constructor 키워드를 이용하여 부 생성자를 정의할 수 있다.
- super라는 키워드를 통해 자신에 대응하는 상위 클래스 생성자를 호출한다.
- 생성자가 상위 클래스 생성자에게 객체 생성을 위임한다.
open class MyButton : View {
    constructor(ctx: Context) : super(ctx) {}   // 상위 클래스의 생성자 호출
}

* 코틀린에서는 인터페이스에 추상 프로퍼티 선언을 넣을 수 있다.
interface User {
    val nickname: String
}

//위 처럼 선언시 User 인터페이스를 구현하는 클래스는 nickname의 값을 얻을 수 있는 방법을 제공해야 한다.
class PrivateUser(override val nickname: String) : User // 주 생성자에 있는 프로퍼티

class SubscribingUser(val email: String) : User {
    override val nickname: String
        get() = email.substringBefore('@')  // 커스텀 게터 - 매번 결과를 계산
}

class FacebookUser(val accountId: Int) : User {
    override val nickname = getFacebookName(accountId)  // 프로퍼티 초기화 식 - 필드에 저장했다가 불러오는 방식
}

* 비공개 세터가 있는 프로퍼티 선언하 
-프로퍼티를 외부에서 바꾸지 못하게 하려면 private을 프로퍼티에 선언하면 된다.

class LengthCounter {
    var counter: Int = 0
        private set // 이 클래스 밖에서 이 프로퍼티의 값을 바꿀 수 없다.
    fun addWord(word: String) {
        counter += word.length
    }
}


3. 컴파일러가 생성한 메소드: 데이터 클래스와 클래스 위임
* 코틀린 컴파일러는 데이터 클래스의 유용한 메소드(equals, hashCode, toString)를 자동으로 만들어준다.
-> 보통 오버라이드해서 사용
* toString()
- 기본 문자열 표현은 Client@5e9f23b4 같은 방식으로 이 기본 구현을 바꾸려면 오버라이드해야 한다.
class Client(val name: String, val postalCode: Int) {
    override fun toString() = "Client(name=$name, postalCode=$postalCode)"
}

* equals()
class Client(val name: String, val postalCode: Int) {
    //Any 는 java.lang.Object에 대응 클래스
    //Any? 는 널이 될 수 있는 타
    override fun equals(other: Any?) = Boolean {
        //other가 Client인지 검
        if(other == null || other !is Client)   // 코틀린의 is 는 자바의 instanceof 와 같다.
            return false
        //두 객체의 프로퍼티 값이 서로 같은지 검사    
        return name == other.name && postalCode == other.postalCode
    }
}

* hashCode()
class Client(val name: String, val postalCode: Int) {
    override fun hashCode(): Int = name.hashCode() * 31 + postalCode
}

* 데이터 클래스: 모든 클래스가 정의해야 하는 메소드 자동 생성
- data 변경자를 클래스 앞에 붙이면 필요한 메소드를 컴파일러가 자동 생성
-> 인스턴스 간 비교를 위한 equals
-> HashMap과 같은 해시 기반 컨테이너에서 키로 사용할 수 있는 hashCode
-> 클래스의 각 필드를 선언 순서대로 표시하는 문자열 표현을 만들어주는 toString
data class Client(val name: String, val postalCode: Int)

* 클래스 위임: by 키워드 사용
- 대규모 객체 지향 시스템 설계시 시스템 취약하게 만드는 문제? 하위 클래스가 상위 클래스의 메소드를 오버라이드 하면 상위 클레스에 의존적이라 상위 클래스가 바뀌면 코드 제대로 작동하지 않을수...
- 그럴 경우 상속을 허용하지 않은 클래스를 작성할 수도 있는데 이를 사용하기 위해서 데코레이터 패턴으로 사
- 데코레이터 패턴의 방식으로 클래스를 작성시 by 키워드를 사용한다.
- 상속을 허용하지 않는 클래스 대신 사용할 수 있는 새로운 클래스를 만들되
기존 클래스와 같은 인터페이스를 데코레이더가 제공하게 만들고, 
기존 클래스를 데이레이터 내부에 필드로 유지하는 것
class DelegatingCollection<T>(
    innerList: Collection<T> = ArrayList<T>()
) : Collection<T> by innerList()


4. object 키워드: 클래스 선언과 인스턴스 생성
* 코틀린은 객체 선언을 통해 싱글턴을 기본 지원한다.
- 싱글턴: 어떤 클래스가 최초 선언될때 메모리에 적재하고, 그 이후에 동일한 메모리에 인스턴스를 만들어 사용하는 패턴
- object 키워드로 클래스를 정의하면 싱글톤 패턴이 적용되어 객체가 생성된다.
//기본적인 사용방식
fun main() {
    var obj = object {
        var id = 28
        var name = "hong"
        
        fun getInfo(){
            println("id: $id, name: $name")
        }
    }
    obj.getInfo()
}

* 동반 객체: static
- 자바의 static 처럼 정적인 메서드를 만들 수 있는 키워드를 지원하지 않는다.
- 대신 companion object를 사용해서 정적인 메서드를 사용할 수 있다.
- 클래스 안에 정의된 객체 중 하나에 compnaion을 붙이면 그 클래스의 동반 객체로 만들 수 있다.
- 동반 객체에 접근하려면 그 객체가 정의된 클래스 이름을 사용한다.
- 동반 객체를 사용하면 인스턴스가 단 하나만 생성된다.

Class A {
	companion object {
    	fun method1(){
        	println("메서드1 실행")
        }
    }
}
//다른 클래스
A.method1()

* 익명 클래스: 이름이 없는 클래스(일회용 클래스)
- 명시적으로 object를 받아서 상속임을 표시해줘야 한다.

package person

abstract class Person(var name: String, var age: Int) {
    abstract fun printMe()
}

-------------------------------------------------------------

import person.Person

fun main(args: Array<String>) {
    var kgy: Person = object:Person("kgy",28){
        override fun printMe(){
            println(this.name+"is my Name.")
            println("i am"+this.age+" years old")
        }
    }
    kgy.printMe()
}
