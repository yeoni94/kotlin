//3장 함수 정의와 호출

//1. 컬렉션 
//기본 자바 컬렉션과 동일(자바와의 상호호환성을 위해서)
//chapter2 정리의 10. List, Set, Map 참고
//주로 쓰는 컬렉션은 다음과 같다.
val set = hashSetOf(1, 7, 53)
val list = arrayListOf(1, 7, 53)
val map = hashMapOf(1 to "one", 7 to "seven", 53 to "fifty-three")

//2. 디폴트 파라미터
//자바 컬렉션에는 디폴트 toString 구현이 있음으로 컬렉션 호출시 해당 함수를 호출한다.
 fun dp(){
   val list2 = listOf(1,2,3)
   println(list2)
 }


//출력 형식을 원하는 형식으로 수정하고 싶을 경우 해당 함수를 선언하여 사용한다.
fun <T> joinToString(
    collection: Collection<T>,
	separator: String,
	prefix: String,
	postfix: String
): String {
	val result = StringBuilder(prefix)
	for ((index, element) in collection.withIndex()){
		if (index > 0) result.append(separator)
		result.append(element)	
	}
	result.append(postfix)
	return result.toString()
}	
	
//함수 호출시 파라미터의 인자를 명시할 수 있다. 자바의 경우에는 주석으로 작성한다.
//joinToString(list, separator = "", prefix = "", postfix = ".")

//함수 선언시 파라미터의 디폴트 값을 선언할 수 있다. 선언한 파라미터의 디폴트 값을 생략할 수 있다.
fun <T> joinToString2(
    collection: Collection<T>,
	separator: String = ", ",
	prefix: String = "",
	postfix: String = ""
): String {
	val result = StringBuilder(prefix)
	for ((index, element) in collection.withIndex()){
		if (index > 0) result.append(separator)
		result.append(element)	
	}
	result.append(postfix)
	return result.toString()
}	
 
//joinToString2(list, ", ", "", "")
//joinToString(list)
//joinToString(list, ";")
//joinToString(list, postfix = ";", prefix = "# ")

//3. 최상위 프로퍼티/함수
//자바의 util class처럼 껍데기가 필요하지 않다.
//클래스 밖에서도 프로퍼티와 함수를 정의할 수 있다.

//4. 확장 함수와 확장 프로퍼티
//확장 함수는 어떤 클래스의 멤버 메서드인 것처럼 호출할 수 있지만 그 클래스의 밖에 선언된 함수
package strings
fun String.lastChar(): Char = this.get(this.length -1)//this 생략 가능하다.

//확장 함수를 사용하기 위해서는 임포트를 해야 한다.
import strings.lastChar
//import strings.*
val c = "Kotlin".lastChar()

import string.lastChar as last
val c = "Kotlin".last()

//확장 함수는 오버라이드 할 수 없다.

//위의 확장 함수를 다음과 같은 확장 프로퍼티로 바꿀 수 있다.
val String.lastChar: char get() = get(length - 1)

//5. 컬렉션 처리
//코틀린 컬렉션은 자바의 컬력션을 가져와서 사용할 수 도 있지만 더 확장된 API를 제공하고 있다.
val numbers: Collection<Int> = listOf(1, 14, 2)
//last, max 모두 확장 함수
numbers.last() 
numbers.max()

//가변 인자 함수
//자바에서 ... 쓰는 대신 코틀린에서 파라미터 앞에 vararg 변경자를 붙인다.
fun listOf<T>(varargs values: T) : List<T> { ... }

//중위 호출
var map = mapOf(1 to "one", 7 to "seven", 10 to "ten")
//to 라는 단어는 코틀린 키워드가 아니다. 메소드를 호출한 것이다.
to("one") //to 메소드를 일반적인 방식으로 호출함
to "one" //to 메소드를 중위 호출 방식으로 호출함

//6. 문자열과 정규식 다루기
//문자열 나누기
//마침표나 대시(-)로 문자열을 분리하는 예
//정규식을 명시적으로 만들거나
println("12.345-6.A".split("\\.|-".toRegex())) 

//간단한 경우에는 굳이 정규식을 쓸 필요가 없다
println("12.345-6.A".split(".", "-"))

//코틀린 3중 따옴표 문자열
//파일의 전체 경로명을 디렉토리, 파일 이름, 확장자로 나눠야 할 경우?
//   "/Users/yole/kotlin-book/chapter.adoc"

//정규식 사용시 3중 따옴표 안에 쓰면 역슬래 2번 써서 문를 이스케이프할 필요가 없다.
fun parsePath(path: String) {
    val regex = """(.+)/(.+)\.(.+)""".toRegex()
    val matchResult = regex.matchEntire(path)
    
    if (matchResult != null) {
        val (directory, filename, extention) = matchResult.destructured
        println("Dir: $directory, name: $fileName, ext: $extention")
    }
}


		


